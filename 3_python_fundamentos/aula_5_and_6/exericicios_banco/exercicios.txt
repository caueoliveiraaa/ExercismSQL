1 - Neste exercício, você vai criar uma aplicação de gerenciamento de alunos usando SQLite3 e programação orientada
a objetos (POO) em Python. A aplicação permitirá criar, visualizar, atualizar e excluir registros de alunos em uma
tabela chamada Alunos no banco de dados. Utilize a biblioteca sqlite3 para criar um banco de dados chamado escola.db.
Crie uma tabela chamada Alunos com os seguintes campos: id, nome, idade e nota. Crie uma classe chamada Aluno.
Crie os atributos id, nome, idade e nota na classe. Implemente o construtor __init__() para receber os valores dos atributos.
Crie métodos de getters (get_id(), get_nome(), get_idade(), get_nota()) para acessar os valores dos atributos.
Crie métodos de setters (set_nome(), set_idade(), set_nota()) para definir os valores dos atributos.
Crie um método estático na classe Aluno chamado criar_aluno() que aceita os valores de nome, idade e nota como parâmetros.
Este método deve criar uma instância da classe Aluno com os valores passados e inserir um registro na tabela Alunos com esses valores.
Crie um método estático chamado buscar_aluno_por_id() que aceita um ID como parâmetro e retorna uma instância de Aluno com os valores
correspondentes da tabela Alunos. Crie um método estático chamado listar_alunos() que consulta a tabela Alunos e retorna uma lista de
instâncias de Aluno. Crie um loop principal que exibe um menu para o usuário com opções como "Criar Aluno", "Buscar Aluno por ID", "Listar Alunos"
e "Sair". Implemente a lógica para cada opção do menu, chamando os métodos correspondentes da classe Aluno. Na opção "Criar Aluno", solicite ao
usuário que insira nome, idade e nota e, em seguida, chame o método criar_aluno(). Na opção "Buscar Aluno por ID", peça ao usuário para inserir
um ID e exiba os detalhes do aluno correspondente usando o método buscar_aluno_por_id(). Na opção "Listar Alunos", liste todos os alunos usando o
método listar_alunos(). Ao sair do loop principal, feche a conexão com o banco de dados.



2 - Neste exercício, você criará uma hierarquia de classes envolvendo uma classe abstrata Pessoa, com subclasses Aluno e Professor.
Cada classe deve implementar métodos específicos, usando conceitos de abstração, herança e programação orientada a objetos (POO).
Crie uma classe abstrata chamada Pessoa com o método abstrato exibir_info() e calcular_salario().
Implemente o método exibir_info() para exibir informações básicas da pessoa, como nome e idade.
Implemente o método calcular_salario() como um método abstrato, que será diferente para cada subclasse.
Crie uma subclasse Aluno que herde da classe Pessoa.
Implemente o método exibir_info() para exibir informações específicas de um aluno, como nome, idade e número de matrícula.
Implemente o método calcular_salario() para alunos, que, neste caso, não se aplica. Pode ser um método vazio.
Crie uma subclasse Professor que herde da classe Pessoa.
Implemente o método exibir_info() para exibir informações específicas de um professor, como nome, idade e disciplina lecionada.
Implemente o método calcular_salario() para professores, calculando o salário com base na carga horária e valor por hora.
Crie instâncias de Aluno e Professor.
Chame o método exibir_info() para cada instância para verificar a exibição correta das informações.
Chame o método calcular_salario() para o professor e exiba o valor calculado.
Utilize a biblioteca sqlite3 para criar uma tabela chamada Pessoas com os campos tipo (para distinguir entre aluno e professor),
nome, idade, info_extra (número de matrícula para aluno, disciplina para professor) e salario (nullable para aluno).
Implemente métodos para adicionar instâncias de Aluno e Professor à tabela Pessoas, extraindo as informações dos métodos exibir_info()
e calcular_salario() e outros métodos que trabalhem comandos SQL atráves de métodos / funções em Python.
